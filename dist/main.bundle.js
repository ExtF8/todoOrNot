"use strict";(self.webpackChunktodoornot=self.webpackChunktodoornot||[]).push([[179],{996:(e,t,o)=>{const c=document.querySelector("body"),n=document.querySelector("#cs-navigation"),s=document.querySelector("#cs-navigation .cs-toggle");o.p;class d{constructor(e){this.name=e,this.todos=[]}}class l{constructor(){this.projects=[]}addTodoToProject(e){let t=this.getProjectsByName(e.project);t?t.todos.push(e):(t=new d(e.project),t.todos.push(e),this.projects.push(t))}getProjectsByName(e){return this.projects.find((t=>t.name===e))}}class r{constructor(e,t,o,c,n){this.title=e,this.project=t,this.description=o,this.dueDate=c,this.priority=n,this.completed=!1}}const a=new l;class i{constructor(){this.formElement=document.getElementById("todo-form"),this.formElement.addEventListener("submit",this.handleSubmit.bind(this))}handleSubmit(e){e.preventDefault();const t=document.getElementById("title").value,o=document.getElementById("project").value,c=document.getElementById("description").value,n=document.getElementById("dueDate").value,s=document.querySelector('input[name="priority"]:checked').value,d=new r(t,o,c,n,s);a.addTodoToProject(d),console.log(a.projects),this.clearForm(),this.closeDialog()}closeDialog(){document.getElementById("dialog").close()}clearForm(){document.getElementById("title").value="",document.getElementById("project").value="",document.getElementById("description").value="",document.getElementById("dueDate").value="",document.querySelectorAll('input[name="priority"]:checked').forEach((e=>{e.checked=!1}))}}!function(){function e(){document.body.classList.add("dark-mode"),localStorage.setItem("theme","dark")}function t(){document.body.classList.remove("dark-mode"),localStorage.setItem("theme","light")}!function(){let o="light";localStorage.getItem("theme")?o=localStorage.getItem("theme"):window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches&&(o="dark"),"dark"===o?e():t()}(),document.getElementById("dark-mode-toggle").addEventListener("click",(()=>{"light"===localStorage.getItem("theme")?e():t()}))}(),function(){s.addEventListener("click",(function(){s.classList.toggle("cs-active"),n.classList.toggle("cs-active"),c.classList.toggle("cs-open"),function(){const e=document.querySelector("#cs-expanded");"false"===e.getAttribute("aria-expanded")?e.setAttribute("aria-expanded","true"):e.setAttribute("aria-expanded","false")}()}));const e=Array.from(document.querySelectorAll("#cs-navigation .cs-dropdown"));for(const t of e){const e=()=>{t.classList.toggle("cs-active")};t.addEventListener("click",e)}}(),function(e){document.getElementById("content").textContent="";const t=new l,o=new i;console.log("projectManager: ",t.projects),console.log("todoFormHandler: ",o)}()}},e=>{e(e.s=996)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,