"use strict";(self.webpackChunktodoornot=self.webpackChunktodoornot||[]).push([[179],{429:(e,t,o)=>{const c=document.querySelector("body"),n=document.querySelector("#cs-navigation"),a=document.querySelector("#cs-navigation .cs-toggle");o.p,function(){function e(){document.body.classList.add("dark-mode"),localStorage.setItem("theme","dark")}function t(){document.body.classList.remove("dark-mode"),localStorage.setItem("theme","light")}!function(){let o="light";localStorage.getItem("theme")?o=localStorage.getItem("theme"):window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches&&(o="dark"),"dark"===o?e():t()}(),document.getElementById("dark-mode-toggle").addEventListener("click",(()=>{"light"===localStorage.getItem("theme")?e():t()}))}(),function(){a.addEventListener("click",(function(){a.classList.toggle("cs-active"),n.classList.toggle("cs-active"),c.classList.toggle("cs-open"),function(){const e=document.querySelector("#cs-expanded");"false"===e.getAttribute("aria-expanded")?e.setAttribute("aria-expanded","true"):e.setAttribute("aria-expanded","false")}()}));const e=Array.from(document.querySelectorAll("#cs-navigation .cs-dropdown"));for(const t of e){const e=()=>{t.classList.toggle("cs-active")};t.addEventListener("click",e)}}();let s=document.getElementById("content");!function(e){e.textContent="";const t=e;console.log("homePageContent: ",t);const o=function(e,t){const o=document.createElement("div");return o.setAttribute("class","test"),o}();console.log(o),t.appendChild(o)}(s),console.log("main container: ",s)}},e=>{e(e.s=429)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,