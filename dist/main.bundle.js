"use strict";(self.webpackChunktodoornot=self.webpackChunktodoornot||[]).push([[179],{401:(e,t,o)=>{const c=document.querySelector("body"),a=document.querySelector("#cs-navigation"),n=document.querySelector("#cs-navigation .cs-toggle");o.p,function(){function e(){document.body.classList.add("dark-mode"),localStorage.setItem("theme","dark")}function t(){document.body.classList.remove("dark-mode"),localStorage.setItem("theme","light")}!function(){let o="light";localStorage.getItem("theme")?o=localStorage.getItem("theme"):window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches&&(o="dark"),"dark"===o?e():t()}(),document.getElementById("dark-mode-toggle").addEventListener("click",(()=>{"light"===localStorage.getItem("theme")?e():t()}))}(),function(){n.addEventListener("click",(function(){n.classList.toggle("cs-active"),a.classList.toggle("cs-active"),c.classList.toggle("cs-open"),function(){const e=document.querySelector("#cs-expanded");"false"===e.getAttribute("aria-expanded")?e.setAttribute("aria-expanded","true"):e.setAttribute("aria-expanded","false")}()}));const e=Array.from(document.querySelectorAll("#cs-navigation .cs-dropdown"));for(const t of e){const e=()=>{t.classList.toggle("cs-active")};t.addEventListener("click",e)}}(),document.querySelector("#main-container")}},e=>{e(e.s=401)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,